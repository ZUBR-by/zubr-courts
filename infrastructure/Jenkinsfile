pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Build') {
        environment {
            VITE_API_URL = 'https://zubr.club'
            VITE_BACKEND_URL = 'https://graph.zubr.app/api/rest/'
            def VERSION = sh(script: "echo `date +%s`", returnStdout: true).trim()
        }
        steps {
            sh "wget https://api.zubr.in/content.zip?v=$VERSION -O content.zip"
            sh 'rm content/court/*'
            sh 'rm content/judge/*'
            sh 'unzip -q -o content.zip'
            sh 'yarn --cwd=frontend'
            sh 'yarn --cwd=frontend run build --emptyOutDir'
            sh 'rm -rf public'
            sh 'hugo --cacheDir $WORKSPACE/cache --ignoreCache'
        }
    }
    stage('Deploy') {
        environment {
            DIGITALOCEAN_ACCESS_TOKEN = credentials('DIGITALOCEAN_ACCESS_TOKEN')
            def HOSTS = sh(
                script: "doctl compute droplet list --format PublicIPv4 --no-header --tag-name zubr_in| tr '\n' ','",
                returnStdout: true
            ).trim()
        }
        steps {
            ansiblePlaybook(
                  playbook: 'infrastructure/deploy.yml',
                  inventory: "$HOSTS,",
                  credentialsId: "CURRENT_DEPLOY_KEY",
                  hostKeyChecking: false
            )
        }
    }
  }
  post {
    always {
      notifyBuild(currentBuild.result)
    }
  }
}

def notifyBuild(def buildStatus) {
    // set default of build status
    buildStatus =  buildStatus ?: 'SUCCESS'
    GIT_COMMIT_MSG = sh (
        script: "git log --format=format:%s -1 ${GIT_COMMIT}",
        returnStdout: true
    ).trim()
    def emojiMap = [ 'STARTED': '#F0FFFF', 'SUCCESS': 'âœ…', 'FAILURE': 'ðŸ›‘' ]
    telegramSend """
${emojiMap[buildStatus]} *${JOB_NAME}* - ${buildStatus}
${env.RUN_DISPLAY_URL}
${GIT_COMMIT_MSG}
    """
}

